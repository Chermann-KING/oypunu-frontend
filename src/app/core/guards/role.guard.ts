import { Injectable } from '@angular/core';
import { CanActivate, ActivatedRouteSnapshot, Router } from '@angular/router';
import { Observable, map, of } from 'rxjs';
import { AuthService } from '../services/auth.service';
import { UserRole } from '../models/admin';

@Injectable({
  providedIn: 'root',
})
export class RoleGuard implements CanActivate {
  // Hi√©rarchie des r√¥les (plus le nombre est √©lev√©, plus le pouvoir est grand)
  private readonly roleHierarchy = {
    [UserRole.USER]: 0,
    [UserRole.CONTRIBUTOR]: 1,
    [UserRole.ADMIN]: 2,
    [UserRole.SUPERADMIN]: 3,
  };

  constructor(private authService: AuthService, private router: Router) {}

  canActivate(route: ActivatedRouteSnapshot): Observable<boolean> {
    console.log('üîê RoleGuard: V√©rification des permissions');

    // V√©rifier d'abord si l'utilisateur est authentifi√©
    if (!this.authService.isAuthenticated()) {
      console.log('‚ùå RoleGuard: Utilisateur non authentifi√©');
      this.router.navigate(['/auth/login']);
      return of(false);
    }

    return this.authService.currentUser$.pipe(
      map((user) => {
        if (!user) {
          console.log('‚ùå RoleGuard: Aucun utilisateur trouv√©');
          this.router.navigate(['/auth/login']);
          return false;
        }

        const userRole = (user.role as UserRole) || UserRole.USER;
        console.log('üë§ RoleGuard: R√¥le utilisateur:', userRole);

        // R√©cup√©rer les r√¥les requis depuis les donn√©es de la route
        const requiredRoles = route.data['roles'] as UserRole[] | undefined;
        const minRole = route.data['minRole'] as UserRole | undefined;

        // Si aucune restriction de r√¥le n'est d√©finie, autoriser l'acc√®s
        if (!requiredRoles && !minRole) {
          console.log(
            '‚úÖ RoleGuard: Aucune restriction de r√¥le, acc√®s autoris√©'
          );
          return true;
        }

        // V√©rification par r√¥les sp√©cifiques
        if (requiredRoles && requiredRoles.length > 0) {
          const hasRequiredRole = requiredRoles.includes(userRole);
          console.log('üéØ RoleGuard: R√¥les requis:', requiredRoles);
          console.log(
            'üìã RoleGuard: Utilisateur a un r√¥le requis:',
            hasRequiredRole
          );

          if (!hasRequiredRole) {
            this.handleUnauthorizedAccess(userRole);
            return false;
          }
        }

        // V√©rification par niveau minimum de r√¥le
        if (minRole) {
          const userLevel = this.roleHierarchy[userRole];
          const requiredLevel = this.roleHierarchy[minRole];
          const hasMinimumLevel = userLevel >= requiredLevel;

          console.log(
            'üìä RoleGuard: Niveau minimum requis:',
            minRole,
            `(${requiredLevel})`
          );
          console.log(
            'üìä RoleGuard: Niveau utilisateur:',
            userRole,
            `(${userLevel})`
          );
          console.log('üéöÔ∏è RoleGuard: Niveau suffisant:', hasMinimumLevel);

          if (!hasMinimumLevel) {
            this.handleUnauthorizedAccess(userRole);
            return false;
          }
        }

        console.log('‚úÖ RoleGuard: Acc√®s autoris√©');
        return true;
      })
    );
  }

  /**
   * G√®re les acc√®s non autoris√©s avec redirection intelligente
   */
  private handleUnauthorizedAccess(userRole: UserRole): void {
    console.log('üö´ RoleGuard: Acc√®s refus√© pour le r√¥le:', userRole);

    // Redirection intelligente selon le r√¥le de l'utilisateur
    switch (userRole) {
      case UserRole.USER:
        // Utilisateur normal : rediriger vers la page d'accueil
        this.router.navigate(['/home'], {
          queryParams: {
            error: 'access_denied',
            message:
              "Vous n'avez pas les permissions n√©cessaires pour acc√©der √† cette page.",
          },
        });
        break;

      case UserRole.CONTRIBUTOR:
        // Contributeur : rediriger vers le dashboard contributeur s'il existe
        this.router.navigate(['/admin/dashboard'], {
          queryParams: {
            error: 'insufficient_permissions',
            message: 'Permissions insuffisantes pour cette section.',
          },
        });
        break;

      case UserRole.ADMIN:
        // Admin : rediriger vers le dashboard admin
        this.router.navigate(['/admin/dashboard'], {
          queryParams: {
            error: 'superadmin_required',
            message: 'Cette section est r√©serv√©e aux super-administrateurs.',
          },
        });
        break;

      default:
        // Cas par d√©faut
        this.router.navigate(['/home'], {
          queryParams: {
            error: 'access_denied',
            message: 'Acc√®s non autoris√©.',
          },
        });
    }
  }

  /**
   * M√©thode utilitaire pour v√©rifier si un utilisateur a un r√¥le sp√©cifique
   */
  hasRole(userRole: UserRole, requiredRole: UserRole): boolean {
    return this.roleHierarchy[userRole] >= this.roleHierarchy[requiredRole];
  }

  /**
   * M√©thode utilitaire pour v√©rifier si un utilisateur a au moins un des r√¥les requis
   */
  hasAnyRole(userRole: UserRole, requiredRoles: UserRole[]): boolean {
    return requiredRoles.includes(userRole);
  }
}
